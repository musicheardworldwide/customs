[{"id":"get_users_ip","user_id":"d5f14370-de3d-47d6-b47d-3493ec9e2df2","name":"Get Users IP","content":"\"\"\"\ntitle: Get User IP\nauthor: Dr. Wes Caldwell\nauthor_url: https://musicheardworldwide.com\ngit_url: https://github.com/wescadwell/get-user-ip.git\ndescription: This tool retrieves the user's IP address and provides additional metadata.\nrequired_open_webui_version: 0.5.0\nrequirements: requests\nversion: 0.2.0\nlicence: MIT\n\"\"\"\n\nfrom pydantic import BaseModel, Field\nfrom datetime import datetime\nimport requests\nfrom fastapi import Request  # New import\n\n\nclass Tools:\n    def __init__(self):\n        \"\"\"Initialize the Tool.\"\"\"\n        self.valves = self.Valves()\n        self.user_valves = self.UserValves()\n        self.citation = False  # Disable built-in citations to use custom ones\n\n    class Valves(BaseModel):\n        \"\"\"Admin-configurable settings.\"\"\"\n\n        api_key: str = Field(\n            \"\", description=\"API key for external services (if needed).\"\n        )\n        priority: int = Field(\n            default=1, description=\"Priority level for the IP lookup operation.\"\n        )\n\n    class UserValves(BaseModel):\n        \"\"\"User-configurable settings.\"\"\"\n\n        include_location: bool = Field(\n            default=False,\n            description=\"Include approximate location with the IP address.\",\n        )\n        show_citation: bool = Field(\n            default=True, description=\"Show citation for the IP lookup source.\"\n        )\n\n    async def get_user_ip(\n        self,\n        __user__: dict,\n        __request__: Request,  # New parameter\n        __event_emitter__=None,\n        __metadata__: dict = None,\n        __messages__: list = None,\n        __files__: list = None,\n        __model__: str = None,\n    ) -> str:\n        \"\"\"\n        Retrieves the user's IP address and optionally their approximate location.\n        :param __user__: Dictionary containing user information.\n        :param __request__: Request object (new parameter).\n        :param __event_emitter__: Event emitter for status updates and messages.\n        :param __metadata__: Dictionary with chat metadata.\n        :param __messages__: List of previous messages in the chat.\n        :param __files__: List of attached files.\n        :param __model__: Name of the model being used.\n        \"\"\"\n        try:\n            # Emit a status update\n            await __event_emitter__(\n                {\n                    \"type\": \"status\",\n                    \"data\": {\n                        \"description\": \"Fetching your IP address...\",\n                        \"done\": False,\n                    },\n                }\n            )\n\n            # Fetch the user's IP address\n            response = requests.get(\"https://api.ipify.org?format=json\")\n            ip_data = response.json()\n            ip_address = ip_data.get(\"ip\", \"Unknown\")\n\n            # Emit another status update\n            await __event_emitter__(\n                {\n                    \"type\": \"status\",\n                    \"data\": {\"description\": \"IP address retrieved!\", \"done\": False},\n                }\n            )\n\n            # Include location if the user valve is enabled\n            if self.user_valves.include_location:\n                await __event_emitter__(\n                    {\n                        \"type\": \"status\",\n                        \"data\": {\n                            \"description\": \"Fetching approximate location...\",\n                            \"done\": False,\n                        },\n                    }\n                )\n                location_response = requests.get(f\"http://ip-api.com/json/{ip_address}\")\n                location_data = location_response.json()\n                location = f\"{location_data.get('city', 'Unknown')}, {location_data.get('country', 'Unknown')}\"\n                result = f\"Your IP address is **{ip_address}** (Approximate location: {location}).\"\n            else:\n                result = f\"Your IP address is **{ip_address}**.\"\n\n            # Emit a citation if the user valve is enabled\n            if self.user_valves.show_citation:\n                await __event_emitter__(\n                    {\n                        \"type\": \"citation\",\n                        \"data\": {\n                            \"document\": [f\"Your IP address is {ip_address}.\"],\n                            \"metadata\": [\n                                {\n                                    \"date_accessed\": datetime.now().isoformat(),\n                                    \"source\": \"IP Lookup Service\",\n                                }\n                            ],\n                            \"source\": {\n                                \"name\": \"IP Lookup Service\",\n                                \"url\": \"https://api.ipify.org\",\n                            },\n                        },\n                    }\n                )\n\n            # Emit final status update\n            await __event_emitter__(\n                {\n                    \"type\": \"status\",\n                    \"data\": {\"description\": \"Done!\", \"done\": True, \"hidden\": True},\n                }\n            )\n\n            return result\n\n        except Exception as e:\n            # Emit an error status\n            await __event_emitter__(\n                {\n                    \"type\": \"status\",\n                    \"data\": {\"description\": f\"An error occurred: {e}\", \"done\": True},\n                }\n            )\n            return f\"An error occurred while fetching your IP address: {e}\"\n","specs":[{"name":"get_user_ip","description":"Retrieves the user's IP address and optionally their approximate location.","parameters":{"properties":{},"type":"object"}}],"meta":{"description":"get IP","manifest":{"title":"Get User IP","author":"Dr. Wes Caldwell","author_url":"https://musicheardworldwide.com","git_url":"https://github.com/wescadwell/get-user-ip.git","description":"This tool retrieves the user's IP address and provides additional metadata.","required_open_webui_version":"0.5.0","requirements":"requests","version":"0.2.0","licence":"MIT"}},"access_control":null,"updated_at":1749071280,"created_at":1748983516}]